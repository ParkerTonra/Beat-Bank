[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models",
        "description": "src.models",
        "isExtraImport": true,
        "detail": "src.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models",
        "description": "src.models",
        "isExtraImport": true,
        "detail": "src.models",
        "documentation": {}
    },
    {
        "label": "Track",
        "importPath": "src.models",
        "description": "src.models",
        "isExtraImport": true,
        "detail": "src.models",
        "documentation": {}
    },
    {
        "label": "Version",
        "importPath": "src.models",
        "description": "src.models",
        "isExtraImport": true,
        "detail": "src.models",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Track",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Version",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Track",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Version",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "session_scope",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "init_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "init_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "mutagen",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mutagen",
        "description": "mutagen",
        "detail": "mutagen",
        "documentation": {}
    },
    {
        "label": "UserSettings",
        "importPath": "models.user_settings",
        "description": "models.user_settings",
        "isExtraImport": true,
        "detail": "models.user_settings",
        "documentation": {}
    },
    {
        "label": "UserSettings",
        "importPath": "models.user_settings",
        "description": "models.user_settings",
        "isExtraImport": true,
        "detail": "models.user_settings",
        "documentation": {}
    },
    {
        "label": "Track",
        "importPath": "models.track",
        "description": "models.track",
        "isExtraImport": true,
        "detail": "models.track",
        "documentation": {}
    },
    {
        "label": "Track",
        "importPath": "models.track",
        "description": "models.track",
        "isExtraImport": true,
        "detail": "models.track",
        "documentation": {}
    },
    {
        "label": "Track",
        "importPath": "models.track",
        "description": "models.track",
        "isExtraImport": true,
        "detail": "models.track",
        "documentation": {}
    },
    {
        "label": "Track",
        "importPath": "models.track",
        "description": "models.track",
        "isExtraImport": true,
        "detail": "models.track",
        "documentation": {}
    },
    {
        "label": "Track",
        "importPath": "models.track",
        "description": "models.track",
        "isExtraImport": true,
        "detail": "models.track",
        "documentation": {}
    },
    {
        "label": "Track",
        "importPath": "models.track",
        "description": "models.track",
        "isExtraImport": true,
        "detail": "models.track",
        "documentation": {}
    },
    {
        "label": "Version",
        "importPath": "models.version",
        "description": "models.version",
        "isExtraImport": true,
        "detail": "models.version",
        "documentation": {}
    },
    {
        "label": "Version",
        "importPath": "models.version",
        "description": "models.version",
        "isExtraImport": true,
        "detail": "models.version",
        "documentation": {}
    },
    {
        "label": "Version",
        "importPath": "models.version",
        "description": "models.version",
        "isExtraImport": true,
        "detail": "models.version",
        "documentation": {}
    },
    {
        "label": "TrackBusinessModel",
        "importPath": "business.track_business_model",
        "description": "business.track_business_model",
        "isExtraImport": true,
        "detail": "business.track_business_model",
        "documentation": {}
    },
    {
        "label": "TrackBusinessModel",
        "importPath": "business.track_business_model",
        "description": "business.track_business_model",
        "isExtraImport": true,
        "detail": "business.track_business_model",
        "documentation": {}
    },
    {
        "label": "TrackBusinessModel",
        "importPath": "business.track_business_model",
        "description": "business.track_business_model",
        "isExtraImport": true,
        "detail": "business.track_business_model",
        "documentation": {}
    },
    {
        "label": "EditTrackBusinessModel",
        "importPath": "business.edit_track_business",
        "description": "business.edit_track_business",
        "isExtraImport": true,
        "detail": "business.edit_track_business",
        "documentation": {}
    },
    {
        "label": "EditTrackWindow",
        "importPath": "gui.edit_track_window",
        "description": "gui.edit_track_window",
        "isExtraImport": true,
        "detail": "gui.edit_track_window",
        "documentation": {}
    },
    {
        "label": "EditTrackWindow",
        "importPath": "gui.edit_track_window",
        "description": "gui.edit_track_window",
        "isExtraImport": true,
        "detail": "gui.edit_track_window",
        "documentation": {}
    },
    {
        "label": "UserSettingsBusinessModel",
        "importPath": "business.user_settings_business_model",
        "description": "business.user_settings_business_model",
        "isExtraImport": true,
        "detail": "business.user_settings_business_model",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt6",
        "description": "PyQt6",
        "isExtraImport": true,
        "detail": "PyQt6",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt6",
        "description": "PyQt6",
        "isExtraImport": true,
        "detail": "PyQt6",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt6",
        "description": "PyQt6",
        "isExtraImport": true,
        "detail": "PyQt6",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt6",
        "description": "PyQt6",
        "isExtraImport": true,
        "detail": "PyQt6",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt6",
        "description": "PyQt6",
        "isExtraImport": true,
        "detail": "PyQt6",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt6",
        "description": "PyQt6",
        "isExtraImport": true,
        "detail": "PyQt6",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt6",
        "description": "PyQt6",
        "isExtraImport": true,
        "detail": "PyQt6",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QMimeData",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QMimeData",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTime",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "PyQt6.QtWidgets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidgetItem",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHeaderView",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFrame",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QAbstractItemView",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDrag",
        "importPath": "PyQt6.QtGui",
        "description": "PyQt6.QtGui",
        "isExtraImport": true,
        "detail": "PyQt6.QtGui",
        "documentation": {}
    },
    {
        "label": "QDrag",
        "importPath": "PyQt6.QtGui",
        "description": "PyQt6.QtGui",
        "isExtraImport": true,
        "detail": "PyQt6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PyQt6.QtGui",
        "description": "PyQt6.QtGui",
        "isExtraImport": true,
        "detail": "PyQt6.QtGui",
        "documentation": {}
    },
    {
        "label": "EditTrackController",
        "importPath": "controllers.edit_track_controller",
        "description": "controllers.edit_track_controller",
        "isExtraImport": true,
        "detail": "controllers.edit_track_controller",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "track_controller",
        "importPath": "controllers",
        "description": "controllers",
        "isExtraImport": true,
        "detail": "controllers",
        "documentation": {}
    },
    {
        "label": "user_settings_controller",
        "importPath": "controllers",
        "description": "controllers",
        "isExtraImport": true,
        "detail": "controllers",
        "documentation": {}
    },
    {
        "label": "TrackController",
        "importPath": "controllers.track_controller",
        "description": "controllers.track_controller",
        "isExtraImport": true,
        "detail": "controllers.track_controller",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "UserSettingsController",
        "importPath": "controllers.user_settings_controller",
        "description": "controllers.user_settings_controller",
        "isExtraImport": true,
        "detail": "controllers.user_settings_controller",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Track",
        "importPath": "src.models.track",
        "description": "src.models.track",
        "isExtraImport": true,
        "detail": "src.models.track",
        "documentation": {}
    },
    {
        "label": "EditTrackWindow",
        "importPath": "src.gui.edit_track_window",
        "description": "src.gui.edit_track_window",
        "isExtraImport": true,
        "detail": "src.gui.edit_track_window",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "importPath": "gui.main_window",
        "description": "gui.main_window",
        "isExtraImport": true,
        "detail": "gui.main_window",
        "documentation": {}
    },
    {
        "label": "qdarktheme",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qdarktheme",
        "description": "qdarktheme",
        "detail": "qdarktheme",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.6e69d94d8db6_add_current_version_id_to_tracks",
        "description": "alembic.versions.6e69d94d8db6_add_current_version_id_to_tracks",
        "peekOfCode": "def upgrade():\n    # Start batch mode\n    with op.batch_alter_table('tracks', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('current_version_id', sa.Integer(), nullable=True))\n        batch_op.create_foreign_key(batch_op.f('fk_tracks_current_version_id_versions'), 'versions', ['current_version_id'], ['id'])\ndef downgrade():\n    with op.batch_alter_table('tracks', schema=None) as batch_op:\n        batch_op.drop_constraint(batch_op.f('fk_tracks_current_version_id_versions'), type_='foreignkey')\n        batch_op.drop_column('current_version_id')",
        "detail": "alembic.versions.6e69d94d8db6_add_current_version_id_to_tracks",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.6e69d94d8db6_add_current_version_id_to_tracks",
        "description": "alembic.versions.6e69d94d8db6_add_current_version_id_to_tracks",
        "peekOfCode": "def downgrade():\n    with op.batch_alter_table('tracks', schema=None) as batch_op:\n        batch_op.drop_constraint(batch_op.f('fk_tracks_current_version_id_versions'), type_='foreignkey')\n        batch_op.drop_column('current_version_id')",
        "detail": "alembic.versions.6e69d94d8db6_add_current_version_id_to_tracks",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.9d76c798b32f_add_artist_column_to_versions_table",
        "description": "alembic.versions.9d76c798b32f_add_artist_column_to_versions_table",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('tracks', 'BPM')\n    op.drop_column('versions', 'original_artist')\n    op.drop_column('versions', 'path_to_file')\n    op.add_column('versions', sa.Column('bpm', sa.Float(), nullable=True))\n    op.add_column('tracks', sa.Column('bpm', sa.Float(), nullable=True))\n    op.add_column('versions', sa.Column('artist', sa.String(), nullable=True))\n    op.add_column('versions', sa.Column('file_path', sa.String(), nullable=True))\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.9d76c798b32f_add_artist_column_to_versions_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.9d76c798b32f_add_artist_column_to_versions_table",
        "description": "alembic.versions.9d76c798b32f_add_artist_column_to_versions_table",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('versions', sa.Column('path_to_file', sa.VARCHAR(), nullable=True))\n    op.add_column('versions', sa.Column('original_artist', sa.VARCHAR(), nullable=True))\n    op.drop_column('versions', 'bpm')\n    op.drop_column('versions', 'file_path')\n    op.drop_column('versions', 'artist')\n    op.add_column('tracks', sa.Column('BPM', sa.FLOAT(), nullable=True))\n    op.drop_column('tracks', 'bpm')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.9d76c798b32f_add_artist_column_to_versions_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.beb069fcbd63_update_cascade_rules",
        "description": "alembic.versions.beb069fcbd63_update_cascade_rules",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_constraint('fk_tracks_current_version_id_versions', 'tracks', type_='foreignkey')\n    op.create_foreign_key('fk_tracks_current_version_id_versions', 'tracks', 'versions', ['current_version_id'], ['id'], ondelete='CASCADE')\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('tracks',\n    sa.Column('id', sa.INTEGER(), nullable=False),\n    sa.Column('title', sa.VARCHAR(), nullable=True),",
        "detail": "alembic.versions.beb069fcbd63_update_cascade_rules",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.beb069fcbd63_update_cascade_rules",
        "description": "alembic.versions.beb069fcbd63_update_cascade_rules",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('tracks',\n    sa.Column('id', sa.INTEGER(), nullable=False),\n    sa.Column('title', sa.VARCHAR(), nullable=True),\n    sa.Column('length', sa.VARCHAR(), nullable=True),\n    sa.Column('key', sa.VARCHAR(), nullable=True),\n    sa.Column('date_created', sa.DATE(), nullable=True),\n    sa.Column('date_added', sa.DATE(), nullable=True),\n    sa.Column('notes', sa.VARCHAR(), nullable=True),",
        "detail": "alembic.versions.beb069fcbd63_update_cascade_rules",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlite:///music_db.sqlite3\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "current_dir",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "current_dir = os.path.dirname(__file__)\n# Calculate the path to the 'Beat-Bank' directory\nbeat_bank_path = os.path.abspath(os.path.join(current_dir, '..'))\nsrc_path = os.path.join(beat_bank_path, 'src')\n# Add 'Beat-Bank' to the Python path\nsys.path.append(src_path)\nfrom src.models import Base\nfrom logging.config import fileConfig\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "beat_bank_path",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "beat_bank_path = os.path.abspath(os.path.join(current_dir, '..'))\nsrc_path = os.path.join(beat_bank_path, 'src')\n# Add 'Beat-Bank' to the Python path\nsys.path.append(src_path)\nfrom src.models import Base\nfrom logging.config import fileConfig\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\nfrom alembic import context\n# this is the Alembic Config object, which provides",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "src_path",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "src_path = os.path.join(beat_bank_path, 'src')\n# Add 'Beat-Bank' to the Python path\nsys.path.append(src_path)\nfrom src.models import Base\nfrom logging.config import fileConfig\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\nfrom alembic import context\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Base.metadata  # This is the metadata object from src/models/__init__.py",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata  # This is the metadata object from src/models/__init__.py\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "EditTrackBusinessModel",
        "kind": 6,
        "importPath": "src.business.edit_track_business",
        "description": "src.business.edit_track_business",
        "peekOfCode": "class EditTrackBusinessModel:\n    def update_track(self, track):\n        with SessionLocal() as session:\n            try:\n                session.merge(track)  # Merge the updated track object\n                session.commit()\n                print(\"Track updated successfully in the database.\")\n            except Exception as e:\n                print(f\"An error occurred: {e}\")\n                session.rollback()",
        "detail": "src.business.edit_track_business",
        "documentation": {}
    },
    {
        "label": "TrackBusinessModel",
        "kind": 6,
        "importPath": "src.business.track_business_model",
        "description": "src.business.track_business_model",
        "peekOfCode": "class TrackBusinessModel:\n    def add_track(self, track_obj, version_obj):\n        try:\n            with SessionLocal() as session:\n                session.add(track_obj)\n                session.add(version_obj)\n                session.commit()\n        finally:\n            session.close()\n    def delete_track(self, track_id):",
        "detail": "src.business.track_business_model",
        "documentation": {}
    },
    {
        "label": "UserSettingsBusinessModel",
        "kind": 6,
        "importPath": "src.business.user_settings_business_model",
        "description": "src.business.user_settings_business_model",
        "peekOfCode": "class UserSettingsBusinessModel:\n    def get_developer_mode(self):\n        with SessionLocal() as session:\n            settings = session.query(UserSettings).first()\n            if settings is not None:\n                return settings.developer_mode\n            else:\n                # If no settings are found, return a default value (e.g., False)\n                return False\n    def toggle_developer_mode(self):",
        "detail": "src.business.user_settings_business_model",
        "documentation": {}
    },
    {
        "label": "EditTrackController",
        "kind": 6,
        "importPath": "src.controllers.edit_track_controller",
        "description": "src.controllers.edit_track_controller",
        "peekOfCode": "class EditTrackController:\n    def __init__(self, view):\n        self.model = TrackBusinessModel()\n        self.view = view\n        self.view.track_updated.connect(self.update_track)\n    def update_track(self, track):\n        self.model.update_track(track)",
        "detail": "src.controllers.edit_track_controller",
        "documentation": {}
    },
    {
        "label": "TrackController",
        "kind": 6,
        "importPath": "src.controllers.track_controller",
        "description": "src.controllers.track_controller",
        "peekOfCode": "class TrackController:\n    def __init__(self, view):\n        super().__init__()\n        self.model = TrackBusinessModel()\n        self.view = view\n    def add_track(self, path, new_track=True):\n        if new_track == False:\n            print('Adding version to database and updating \"current_version\"')\n            self.add_new_version(path)\n        else:",
        "detail": "src.controllers.track_controller",
        "documentation": {}
    },
    {
        "label": "UserSettingsController",
        "kind": 6,
        "importPath": "src.controllers.user_settings_controller",
        "description": "src.controllers.user_settings_controller",
        "peekOfCode": "class UserSettingsController:\n    def __init__(self, view):\n        super().__init__()\n        self.model = UserSettingsBusinessModel()\n        self.view = view\n    def get_developer_mode(self):\n        return self.model.get_developer_mode()\n    def toggle_developer_mode(self):\n        self.model.toggle_developer_mode()\n        return",
        "detail": "src.controllers.user_settings_controller",
        "documentation": {}
    },
    {
        "label": "DraggableTable",
        "kind": 6,
        "importPath": "src.gui.draggable_table",
        "description": "src.gui.draggable_table",
        "peekOfCode": "class DraggableTable(QTableWidget):\n    def __init__(self, *args, **kwargs):\n        super(DraggableTable, self).__init__(*args, **kwargs)\n        self.setDragEnabled(True)\n    def startDrag(self, supportedActions):\n        index = self.currentIndex()\n        if not index.isValid():\n            return\n        # Assuming the file path is in the 5th column (change as per your table structure)\n        file_path = self.item(index.row(), 4).text()",
        "detail": "src.gui.draggable_table",
        "documentation": {}
    },
    {
        "label": "EditTrackWindow",
        "kind": 6,
        "importPath": "src.gui.edit_track_window",
        "description": "src.gui.edit_track_window",
        "peekOfCode": "class EditTrackWindow(QWidget):\n    track_updated = pyqtSignal(Track)\n    def __init__(self, track):\n        super().__init__()\n        self.initUI()\n        self.track = track\n        self.controller = EditTrackController(self)\n        self.submitButton.clicked.connect(self.submit_edit)\n    def initUI(self):\n        print(\"Initializing UI for edit window...\")",
        "detail": "src.gui.edit_track_window",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "src.gui.main_window",
        "description": "src.gui.main_window",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.track_controller = TrackController(self)\n        self.user_settings = UserSettings()\n        self._updating_cell = False\n        self.isEditing = False\n        self.init_ui()\n    def init_ui(self):\n        print(\"Initializing UI for main window...\")",
        "detail": "src.gui.main_window",
        "documentation": {}
    },
    {
        "label": "UserSettingsWindow",
        "kind": 6,
        "importPath": "src.gui.user_settings_window",
        "description": "src.gui.user_settings_window",
        "peekOfCode": "class UserSettingsWindow(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.user_settings_controller = UserSettingsController(self)\n        self.initUI()\n    def initUI(self):\n        print(\"Initializing UI for user settings window...\")\n        # Create widgets for label and text entry\n        # Default Artist Name (if none found)\n        self.default_artist_label = QLabel(\"Default Artist: \", self)",
        "detail": "src.gui.user_settings_window",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "src.models.base",
        "description": "src.models.base",
        "peekOfCode": "Base = declarative_base()",
        "detail": "src.models.base",
        "documentation": {}
    },
    {
        "label": "Track",
        "kind": 6,
        "importPath": "src.models.track",
        "description": "src.models.track",
        "peekOfCode": "class Track(Base):\n    __tablename__ = 'tracks'\n    __table_args__ = {'extend_existing': True}\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    title = Column(String)\n    artist = Column(String)\n    bpm = Column(Float)\n    length = Column(String)\n    key = Column(String)\n    date_created = Column(Date)",
        "detail": "src.models.track",
        "documentation": {}
    },
    {
        "label": "UserSettings",
        "kind": 6,
        "importPath": "src.models.user_settings",
        "description": "src.models.user_settings",
        "peekOfCode": "class UserSettings(Base):\n    __tablename__ = 'user_settings'\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    developer_mode = Column(Boolean, default=False)\n    dark_mode = Column(Boolean, default=True)\n    # local library mode (big)",
        "detail": "src.models.user_settings",
        "documentation": {}
    },
    {
        "label": "Version",
        "kind": 6,
        "importPath": "src.models.version",
        "description": "src.models.version",
        "peekOfCode": "class Version(Base):\n    __tablename__ = 'versions'\n    __table_args__ = {'extend_existing': True}\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    track_id = Column(Integer, ForeignKey('tracks.id'))\n    title = Column(String)\n    artist = Column(String)\n    length = Column(String)\n    key = Column(String)\n    date_added = Column(Date)",
        "detail": "src.models.version",
        "documentation": {}
    },
    {
        "label": "track",
        "kind": 5,
        "importPath": "src.tests.test_editwindow",
        "description": "src.tests.test_editwindow",
        "peekOfCode": "track = Track(title='Test Track', artist='Test Artist', length='3:00', bpm='120')\napp = QApplication(sys.argv)\nedit_window = EditTrackWindow()\nedit_window.setTrackInfo(track)\nedit_window.show()\nsys.exit(app.exec())",
        "detail": "src.tests.test_editwindow",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.tests.test_editwindow",
        "description": "src.tests.test_editwindow",
        "peekOfCode": "app = QApplication(sys.argv)\nedit_window = EditTrackWindow()\nedit_window.setTrackInfo(track)\nedit_window.show()\nsys.exit(app.exec())",
        "detail": "src.tests.test_editwindow",
        "documentation": {}
    },
    {
        "label": "edit_window",
        "kind": 5,
        "importPath": "src.tests.test_editwindow",
        "description": "src.tests.test_editwindow",
        "peekOfCode": "edit_window = EditTrackWindow()\nedit_window.setTrackInfo(track)\nedit_window.show()\nsys.exit(app.exec())",
        "detail": "src.tests.test_editwindow",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "def main():\n    # Initialize the database\n    init_db()\n    # Create the application object\n    app = QApplication(sys.argv)\n    # Dark mode theme\n    qdarktheme.setup_theme()\n    # Create the main window\n    main_window = MainWindow()\n    # Show the main window",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "session_scope",
        "kind": 2,
        "importPath": "src.database",
        "description": "src.database",
        "peekOfCode": "def session_scope():\n    session = SessionLocal()\n    try:\n        yield session\n        session.commit()\n    except Exception:\n        session.rollback()\n        raise\n    finally:\n        session.close()",
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "init_db",
        "kind": 2,
        "importPath": "src.database",
        "description": "src.database",
        "peekOfCode": "def init_db():\n    # Create tables in the database\n    Base.metadata.create_all(bind=engine)",
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "src.database",
        "description": "src.database",
        "peekOfCode": "engine = create_engine('sqlite:///music_db.sqlite3')\n# Create a custom Session class\nSessionLocal = sessionmaker(bind=engine)\n@contextmanager\ndef session_scope():\n    session = SessionLocal()\n    try:\n        yield session\n        session.commit()\n    except Exception:",
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "src.database",
        "description": "src.database",
        "peekOfCode": "SessionLocal = sessionmaker(bind=engine)\n@contextmanager\ndef session_scope():\n    session = SessionLocal()\n    try:\n        yield session\n        session.commit()\n    except Exception:\n        session.rollback()\n        raise",
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "setup_database",
        "kind": 2,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "def setup_database():\n    # Create an engine\n    engine = create_engine('sqlite:///music_db.sqlite3') # create \n    # Create the tables\n    Base.metadata.create_all(engine)\nif __name__ == '__main__':\n    setup_database()",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "initialize_versions",
        "kind": 2,
        "importPath": "setup2",
        "description": "setup2",
        "peekOfCode": "def initialize_versions():\n    with SessionLocal() as session:\n        # Retrieve all tracks\n        tracks = session.query(Track).all()\n        for track in tracks:\n            # Create a new version for each track based on its details\n            new_version = Version(\n                track_id=track.id,\n                title=track.title,\n                length=track.length,",
        "detail": "setup2",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "setup3",
        "description": "setup3",
        "peekOfCode": "def upgrade():\n    # Start batch mode\n    with op.batch_alter_table('tracks', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('current_version_id', sa.Integer(), nullable=True))\n        batch_op.create_foreign_key(batch_op.f('fk_tracks_current_version_id_versions'), 'versions', ['current_version_id'], ['id'])\ndef downgrade():\n    with op.batch_alter_table('tracks', schema=None) as batch_op:\n        batch_op.drop_constraint(batch_op.f('fk_tracks_current_version_id_versions'), type_='foreignkey')\n        batch_op.drop_column('current_version_id')",
        "detail": "setup3",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "setup3",
        "description": "setup3",
        "peekOfCode": "def downgrade():\n    with op.batch_alter_table('tracks', schema=None) as batch_op:\n        batch_op.drop_constraint(batch_op.f('fk_tracks_current_version_id_versions'), type_='foreignkey')\n        batch_op.drop_column('current_version_id')",
        "detail": "setup3",
        "documentation": {}
    }
]